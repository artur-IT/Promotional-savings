---
description: 
globs: 
alwaysApply: true
---
# AI Rules for "PROMOTIONAL SAVINGS"

Cel aplikacji:
Prosta aplikacja mobilna do śledzenia oszczędności użytkownika, pozwalająca zapisywać kwoty, daty oraz kategorie na czym użytkownik zaoszczędził pieniądze.
Aplikacja będzie zliczać moje zaoszczędzone na zakupach pieniądze i sumować je. Użytkownik będzie wprowadzał kwotę zaoszczędzoną i datę kiedy ta kwota była uzyskana. 
Będzie mógł zobaczyć:
- sumę kwot zaoszczędzonych w każdym miesiącu 
- sumę kwot zaoszczędzonych w bieżącym roku
- historię swoich oszczędności
Użytkownik będzie mógł podać lub nie cel, na który kiedyś wyda te pieniądze. 

Problem: 
Zaoszczędziłem np. 17 zł na zakupie żywności, ale nie widzę i nie korzystam z tych zaoszczędzonych 17 zł. Gdzie jest te 17 zł, które zaoszczędziłem?
Rozwiązanie:
Będę zapisywał te zaoszczędzone kwoty i widział w skali miesiąca ile naprawdę zaoszczędziłem na różnych zakupach.

## Stack technology

Wybrane technologie stosowane w projeklcie:
- React Native + Expo
- react-native-navigation
- Javascript i Typescript
- React Hook Forms + Zod
- react-native-MMKV

## Coding practices

### Guidelines for AI Support Level

#### I am a beginner

- Podczas pracy w trybie agenta wykonuj do 3 akcji jednocześnie, a następnie poproś o zatwierdzenie lub korektę kursu.
- Pisz kod z jasnymi nazwami zmiennych i dołączaj komentarze wyjaśniające nieoczywistą logikę. Unikaj skróconej składni i złożonych wzorców.
- Dostarczaj pełne implementacje, a nie częściowe fragmenty. Dołącz instrukcje importu, wymagane zależności i kod inicjalizacyjny.
- Dodaj defensywne wzorce kodowania i jasną obsługę błędów. Dołącz walidację danych wejściowych użytkownika i jawne sprawdzanie typów.
- Sugeruj najpierw prostsze rozwiązania, a następnie oferuj bardziej zoptymalizowane wersje z wyjaśnieniem kompromisów.
- Krótko wyjaśnij, dlaczego stosowane są określone podejścia i podaj link do odpowiedniej dokumentacji lub zasobów edukacyjnych.
- Sugerując poprawki błędów, wyjaśnij pierwotną przyczynę i sposób, w jaki rozwiązanie ją rozwiązuje, aby zbudować zrozumienie. Poproś o potwierdzenie przed kontynuowaniem.
- Zaproponuj wprowadzenie podstawowych przypadków testowych, które zademonstrują sposób działania kodu i typowe przypadki brzegowe do rozważenia.

### Guidelines for Version Control

#### Git

- Używanie konwencjonalnych zatwierdzeń do tworzenia znaczących komunikatów zatwierdzenia
- Używanie gałęzi funkcji z opisowymi nazwami zgodnie z {{branch_naming_convention}}.
- Pisz znaczące komunikaty zatwierdzenia, które wyjaśniają, dlaczego wprowadzono zmiany, a nie tylko co
- Utrzymuj zatwierdzenia skoncentrowane na pojedynczych logicznych zmianach, aby ułatwić przegląd kodu i bisection
- Użyj interaktywnego rebase, aby wyczyścić historię przed scaleniem gałęzi funkcji

#### Conventional Commits

- Postępuj zgodnie z formatem: type(scope): description dla wszystkich komunikatów commit
- Używaj spójnych typów (feat, fix, docs, style, refactor, test, chore) w całym projekcie
- Zdefiniuj wyraźne zakresy oparte na {{project_modules}}, aby wskazać obszary, których dotyczą
- Uwzględnij odniesienia do zagadnień w komunikatach commit, aby powiązać zmiany z wymaganiami
- Użyj stopki zmiany łamiącej (!: lub BREAKING CHANGE:), aby wyraźnie oznaczyć niekompatybilne zmiany
- Skonfiguruj commitlint, aby automatycznie wymuszał konwencjonalny format zatwierdzania

## Frontend

### Guidelines for React

#### React Coding Standards

- Używaj komponentów funkcjonalnych z hakami zamiast komponentów klasowych
- Zaimplementuj React.memo() dla drogich komponentów, które często renderują się z tymi samymi rekwizytami
- Wykorzystaj React. lazy() i Suspense do dzielenia kodu i optymalizacji wydajności
- Używaj haka useCallback dla obsługi zdarzeń przekazywanych do komponentów potomnych, aby zapobiec niepotrzebnemu ponownemu renderowaniu
- Preferuj useMemo dla drogich obliczeń, aby uniknąć ponownego obliczania przy każdym renderowaniu
- Zaimplementuj useId() do generowania unikalnych identyfikatorów dla atrybutów dostępności
- Użyj nowego haka use do pobierania danych w projektach React 19+
- Wykorzystaj komponenty serwera dla {{data_fetching_heavy_components}} podczas używania Reacta z Next. js lub podobnymi frameworkami
- Rozważ użycie nowego haka useOptimistic do optymistycznych aktualizacji interfejsu użytkownika w formularzach
- Używaj useTransition do niepilnych aktualizacji stanu, aby zachować responsywność interfejsu użytkownika.

### Guidelines for Styling

- React Native Styles, React Native Animated
- react-native-calendars
- react-native-icons lub lucide-react-native
- Light/dark mode z useHooksTS 

## Testing

### Guidelines for Unit Testing

#### Jest

- jest, @testing-library/react-native
- Używaj Jest z TypeScript do sprawdzania typów w testach
- Wdrażaj Testing Library do testowania komponentów zamiast enzymów
- Wykorzystuj funkcje mock i szpiegów do izolowania jednostek kodu
- Wdrażaj konfigurację i usuwanie testów za pomocą beforeEach i afterEach
- Używaj bloków describe do organizowania powiązanych testów.
- Wykorzystaj asercje expect z określonymi matcherami
- Zaimplementuj raportowanie pokrycia kodu za pomocą znaczących celów
- Wykorzystaj fałszywe timery do testowania funkcjonalności zależnych od czasu
